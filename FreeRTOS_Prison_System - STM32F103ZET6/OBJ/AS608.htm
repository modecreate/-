<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\AS608.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\AS608.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat May 20 17:23:08 2023
<BR><P>
<H3>Maximum Stack Usage =        744 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ai_load_picfile &rArr; gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[19]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">BusFault_Handler</a><BR>
 <LI><a href="#[6b]">FaceDo_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">FaceDo_task</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[120]">LCD_Fill</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">LCD_Fill</a><BR>
 <LI><a href="#[18]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">UsageFault_Handler</a><BR>
 <LI><a href="#[221]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[221]">usmart_strcmp</a><BR>
 <LI><a href="#[22a]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a]">usmart_strcopy</a><BR>
 <LI><a href="#[226]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">FRMAIN_task</a> from main.o(i.FRMAIN_task) referenced from main.o(i.start_task)
 <LI><a href="#[66]">FR_Fun_task</a> from main.o(i.FR_Fun_task) referenced from main.o(i.start_task)
 <LI><a href="#[4f]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">FaceDo_task</a> from main.o(i.FaceDo_task) referenced from main.o(i.start_task)
 <LI><a href="#[17]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[68]">LCD180DHT11_task</a> from main.o(i.LCD180DHT11_task) referenced from main.o(i.start_task)
 <LI><a href="#[69]">LCD180MQ2_task</a> from main.o(i.LCD180MQ2_task) referenced from main.o(i.start_task)
 <LI><a href="#[6a]">LCD_task</a> from main.o(i.LCD_task) referenced from main.o(i.start_task)
 <LI><a href="#[18]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">PS_ReadSysPara</a> from as608.o(i.PS_ReadSysPara) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b]">PS_SetAddr</a> from as608.o(i.PS_SetAddr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c]">PS_ValidTempleteNum</a> from as608.o(i.PS_ValidTempleteNum) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9]">PS_WriteReg</a> from as608.o(i.PS_WriteReg) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[20]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[21]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM2_IRQHandler</a> from usmart.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">TIM6_IRQHandler</a> from timer.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">USART2_IRQHandler</a> from usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[5e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[5d]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[e]">ai_load_picfile</a> from piclib.o(i.ai_load_picfile) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[10]">bmp_encode</a> from bmp.o(i.bmp_encode) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[5f]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[60]">jpeg_in_func</a> from tjpgd.o(i.jpeg_in_func) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[62]">jpeg_out_func_fill</a> from tjpgd.o(i.jpeg_out_func_fill) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[61]">jpeg_out_func_point</a> from tjpgd.o(i.jpeg_out_func_point) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[5]">mem_init</a> from malloc.o(i.mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[6]">mem_perused</a> from malloc.o(i.mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[d]">mf_scan_files</a> from fattester.o(i.mf_scan_files) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[f]">minibmp_decode</a> from bmp.o(i.minibmp_decode) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[67]">press_FR_task</a> from main.o(i.press_FR_task) referenced from main.o(i.start_task)
 <LI><a href="#[6c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[64]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[7]">read_addr</a> from usmart.o(i.read_addr) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[63]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[12]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[13]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[11]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[14]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[8]">write_addr</a> from usmart.o(i.write_addr) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[70]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[255]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[256]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[257]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[258]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[259]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[71]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[95]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[73]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[74]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[76]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[78]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[25a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[25b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[260]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[261]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[262]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[263]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[264]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[265]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[266]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[267]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[268]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[269]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[26a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[270]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[271]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[272]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[273]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[274]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[275]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[276]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[277]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[278]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BoardInit &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[279]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[81]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[27a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[83]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1b]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[232]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27b]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[27c]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[86]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSG90
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Face
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[8a]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>

<P><STRONG><a name="[8d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[72]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[90]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[91]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[92]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[93]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[104]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>

<P><STRONG><a name="[1e2]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[100]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[96]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[27d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Face
</UL>

<P><STRONG><a name="[98]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[27e]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e4]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[281]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[286]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[9c]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[77]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[79]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[89]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[28a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[28c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[80]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[aa]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[a2]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[ae]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[fb]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[fa]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[ac]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[a9]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[f8]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[ab]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[f9]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[ad]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[a4]"></a>Adc_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[af]"></a>Add_FR</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, main.o(i.Add_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Add_FR &rArr; PS_ValidTempleteNum &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FR_Fun_task
</UL>

<P><STRONG><a name="[b7]"></a>BEEP_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, beep.o(i.BEEP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEEP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b9]"></a>Beep_1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.Beep_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Beep_1 &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Face
</UL>

<P><STRONG><a name="[ba]"></a>BoardInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = BoardInit &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StaGPIO_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[cd]"></a>CmdResp1Error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ce]"></a>CmdResp2Error</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[cf]"></a>CmdResp3Error</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[d0]"></a>CmdResp6Error</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[d1]"></a>CmdResp7Error</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[d2]"></a>DHT11_Check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Check &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[c1]"></a>DHT11_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DHT11_Init &rArr; DHT11_Rst &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[d5]"></a>DHT11_Read_Bit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Read_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
</UL>

<P><STRONG><a name="[d6]"></a>DHT11_Read_Byte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DHT11_Read_Byte &rArr; DHT11_Read_Bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
</UL>

<P><STRONG><a name="[d7]"></a>DHT11_Read_Data</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dht11.o(i.DHT11_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DHT11_Read_Data &rArr; DHT11_Rst &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Byte
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
</UL>

<P><STRONG><a name="[d4]"></a>DHT11_Rst</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DHT11_Rst &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>

<P><STRONG><a name="[153]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[152]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[154]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[1c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>Del_FR</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, main.o(i.Del_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Del_FR &rArr; PS_ValidTempleteNum &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FR_Fun_task
</UL>

<P><STRONG><a name="[25]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI0_IRQHandler &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI3_IRQHandler &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI4_IRQHandler &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>EXTI8_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, exti.o(i.EXTI8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI8_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[36]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
</UL>

<P><STRONG><a name="[149]"></a>EnsureMessage</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, as608.o(i.EnsureMessage))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
</UL>

<P><STRONG><a name="[65]"></a>FRMAIN_task</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(i.FRMAIN_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FRMAIN_task &rArr; PS_ValidTempleteNum &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[66]"></a>FR_Fun_task</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.FR_Fun_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = FR_Fun_task &rArr; Add_FR &rArr; PS_ValidTempleteNum &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[123]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[122]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[e9]"></a>Face</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(i.Face))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Face &rArr; doSG90 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSG90
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaceDo_task
</UL>

<P><STRONG><a name="[6b]"></a>FaceDo_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.FaceDo_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = FaceDo_task &rArr;  FaceDo_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaceDo_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Face
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaceDo_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[ed]"></a>FindSCR</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_GPIOInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StaGPIO_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[105]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[da]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[f1]"></a>GUI_DrawFont16</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, gui.o(i.GUI_DrawFont16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont16 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str1
</UL>

<P><STRONG><a name="[f5]"></a>GUI_DrawFont24</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, gui.o(i.GUI_DrawFont24))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont24 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str1
</UL>

<P><STRONG><a name="[f6]"></a>GUI_DrawFont32</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, gui.o(i.GUI_DrawFont32))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_DrawFont32 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str1
</UL>

<P><STRONG><a name="[f7]"></a>Get_Adc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(i.Get_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[fc]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Get_Adc_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_Adc_Average &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
</UL>

<P><STRONG><a name="[fd]"></a>Get_HzMat</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, text.o(i.Get_HzMat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[ff]"></a>Gui_StrCenter</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gui.o(i.Gui_StrCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Gui_StrCenter &rArr; Show_Str1 &rArr; GUI_DrawFont32 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
</UL>

<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[165]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[102]"></a>IsCardProgramming</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[c3]"></a>KEY_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[e7]"></a>KEY_Scan</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, key.o(i.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = KEY_Scan &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>

<P><STRONG><a name="[68]"></a>LCD180DHT11_task</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, main.o(i.LCD180DHT11_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LCD180DHT11_task &rArr; Gui_StrCenter &rArr; Show_Str1 &rArr; GUI_DrawFont32 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowNum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[69]"></a>LCD180MQ2_task</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main.o(i.LCD180MQ2_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD180MQ2_task &rArr; Gui_StrCenter &rArr; Show_Str1 &rArr; GUI_DrawFont32 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowNum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Clear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[106]"></a>LCD180_Clear</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, lcd180.o(i.LCD180_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD180_Clear &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
</UL>

<P><STRONG><a name="[f3]"></a>LCD180_DrawPoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd180.o(i.LCD180_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD180_DrawPoint &rArr; LCD180_WriteData_16Bit &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowChar
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
</UL>

<P><STRONG><a name="[10f]"></a>LCD180_GPIOInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd180.o(i.LCD180_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD180_GPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
</UL>

<P><STRONG><a name="[bf]"></a>LCD180_Init</STRONG> (Thumb, 570 bytes, Stack size 8 bytes, lcd180.o(i.LCD180_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD180_Init &rArr; LCD180_Clear &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_direction
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_REG
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_DATA
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_RESET
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_GPIOInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[110]"></a>LCD180_RESET</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd180.o(i.LCD180_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD180_RESET &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
</UL>

<P><STRONG><a name="[10e]"></a>LCD180_SetCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd180.o(i.LCD180_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
</UL>

<P><STRONG><a name="[f2]"></a>LCD180_SetWindows</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lcd180.o(i.LCD180_SetWindows))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteRAM_Prepare
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_REG
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowChar
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Clear
</UL>

<P><STRONG><a name="[115]"></a>LCD180_ShowChar</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, gui.o(i.LCD180_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD180_ShowChar &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str1
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowNum
</UL>

<P><STRONG><a name="[107]"></a>LCD180_ShowNum</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, gui.o(i.LCD180_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD180_ShowNum &rArr; LCD180_ShowChar &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
</UL>

<P><STRONG><a name="[112]"></a>LCD180_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd180.o(i.LCD180_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteReg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
</UL>

<P><STRONG><a name="[111]"></a>LCD180_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd180.o(i.LCD180_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD180_WR_REG &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteRAM_Prepare
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
</UL>

<P><STRONG><a name="[f4]"></a>LCD180_WriteData_16Bit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd180.o(i.LCD180_WriteData_16Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD180_WriteData_16Bit &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIv_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowChar
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_DrawPoint
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Clear
</UL>

<P><STRONG><a name="[114]"></a>LCD180_WriteRAM_Prepare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd180.o(i.LCD180_WriteRAM_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD180_WriteRAM_Prepare &rArr; LCD180_WR_REG &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_SetWindows
</UL>

<P><STRONG><a name="[118]"></a>LCD180_WriteReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd180.o(i.LCD180_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD180_WriteReg &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_REG
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_direction
</UL>

<P><STRONG><a name="[113]"></a>LCD180_direction</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lcd180.o(i.LCD180_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD180_direction &rArr; LCD180_WriteReg &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
</UL>

<P><STRONG><a name="[128]"></a>LCD_BGR2RGB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(i.LCD_BGR2RGB))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[119]"></a>LCD_Clear</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[11c]"></a>LCD_Display_Dir</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[11e]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 262 bytes, Stack size 36 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>

<P><STRONG><a name="[120]"></a>LCD_Fill</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = LCD_Fill &rArr;  LCD_Fill (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[c0]"></a>LCD_Init</STRONG> (Thumb, 11812 bytes, Stack size 168 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_Init &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[125]"></a>LCD_RD_DATA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[127]"></a>LCD_ReadPoint</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lcd.o(i.LCD_ReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_ReadPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[124]"></a>LCD_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_ReadReg &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[126]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[11d]"></a>LCD_Scan_Dir</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
</UL>

<P><STRONG><a name="[11a]"></a>LCD_SetCursor</STRONG> (Thumb, 310 bytes, Stack size 36 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[12a]"></a>LCD_Set_Window</STRONG> (Thumb, 378 bytes, Stack size 44 bytes, lcd.o(i.LCD_Set_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
</UL>

<P><STRONG><a name="[12b]"></a>LCD_ShowChar</STRONG> (Thumb, 190 bytes, Stack size 52 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[12c]"></a>LCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[11b]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
</UL>

<P><STRONG><a name="[11f]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[6a]"></a>LCD_task</STRONG> (Thumb, 774 bytes, Stack size 16 bytes, main.o(i.LCD_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = LCD_task &rArr; bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_refresh
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[10d]"></a>MQ2_GetPPM</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, adc.o(i.MQ2_GetPPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MQ2_GetPPM &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
</UL>

<P><STRONG><a name="[18]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[1fb]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>OV7725_Init</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, ov7725.o(i.OV7725_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OV7725_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[131]"></a>OV7725_Window_Set</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ov7725.o(i.OV7725_Window_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OV7725_Window_Set &rArr; SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[d9]"></a>PS_DeletChar</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, as608.o(i.PS_DeletChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PS_DeletChar &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
</UL>

<P><STRONG><a name="[b1]"></a>PS_GenChar</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, as608.o(i.PS_GenChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PS_GenChar &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[b0]"></a>PS_GetImage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, as608.o(i.PS_GetImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PS_GetImage &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[e2]"></a>PS_HandShake</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, as608.o(i.PS_HandShake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PS_HandShake &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>

<P><STRONG><a name="[148]"></a>PS_HighSpeedSearch</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, as608.o(i.PS_HighSpeedSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PS_HighSpeedSearch &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
</UL>

<P><STRONG><a name="[b4]"></a>PS_Match</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, as608.o(i.PS_Match))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PS_Match &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[a]"></a>PS_ReadSysPara</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, as608.o(i.PS_ReadSysPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PS_ReadSysPara &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>PS_RegModel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, as608.o(i.PS_RegModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PS_RegModel &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[b]"></a>PS_SetAddr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, as608.o(i.PS_SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PS_SetAddr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>PS_StaGPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, as608.o(i.PS_StaGPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PS_StaGPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b6]"></a>PS_StoreChar</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, as608.o(i.PS_StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PS_StoreChar &rArr; JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[c]"></a>PS_ValidTempleteNum</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, as608.o(i.PS_ValidTempleteNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PS_ValidTempleteNum &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>PS_WriteReg</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, as608.o(i.PS_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PS_WriteReg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[121]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[16f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
</UL>

<P><STRONG><a name="[195]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[a5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_GPIOInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StaGPIO_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Init
</UL>

<P><STRONG><a name="[a3]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[197]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[140]"></a>SCCB_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCCB_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[14a]"></a>SCCB_No_Ack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sccb.o(i.SCCB_No_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_No_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[14b]"></a>SCCB_RD_Byte</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sccb.o(i.SCCB_RD_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCCB_RD_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[142]"></a>SCCB_RD_Reg</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sccb.o(i.SCCB_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCCB_RD_Reg &rArr; SCCB_WR_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[14c]"></a>SCCB_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[14e]"></a>SCCB_Stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sccb.o(i.SCCB_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[14d]"></a>SCCB_WR_Byte</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sccb.o(i.SCCB_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCCB_WR_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[141]"></a>SCCB_WR_Reg</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sccb.o(i.SCCB_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SCCB_WR_Reg &rArr; SCCB_WR_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Window_Set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
</UL>

<P><STRONG><a name="[14f]"></a>SDEnWideBus</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[cc]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[161]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[15c]"></a>SDIO_Clock_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[166]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[ef]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[157]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[cb]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[15e]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[50]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[f0]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ee]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[160]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[16b]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[151]"></a>SD_DMA_Config</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[155]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[15a]"></a>SD_GetCardInfo</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[156]"></a>SD_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[159]"></a>SD_InitializeCards</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[158]"></a>SD_PowerON</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[150]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>SD_ReadBlock</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[167]"></a>SD_ReadDisk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[169]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[15b]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[15d]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[16a]"></a>SD_WriteBlock</STRONG> (Thumb, 706 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[16c]"></a>SD_WriteDisk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[16d]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 730 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[16e]"></a>SPI2_Init</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[172]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[176]"></a>SPI2_SetSpeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[171]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[173]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[175]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[174]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[170]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[117]"></a>SPIv_WriteData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd180spi.o(i.SPIv_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIv_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WriteData_16Bit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_REG
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_WR_DATA
</UL>

<P><STRONG><a name="[b3]"></a>ShowErrMessage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.ShowErrMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ShowErrMessage &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureMessage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
</UL>

<P><STRONG><a name="[177]"></a>Show_Font</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, text.o(i.Show_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Str
</UL>

<P><STRONG><a name="[12e]"></a>Show_Str</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, text.o(i.Show_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Show_Str &rArr; Show_Font &rArr; Get_HzMat &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Font
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[101]"></a>Show_Str1</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, gui.o(i.Show_Str1))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Show_Str1 &rArr; GUI_DrawFont32 &rArr; LCD180_SetWindows &rArr; LCD180_WR_DATA &rArr; SPIv_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowChar
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont32
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont24
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFont16
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gui_StrCenter
</UL>

<P><STRONG><a name="[1be]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usmart.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>TIM3_PWM_Init</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, pwm.o(i.TIM3_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TIM3_PWM_Init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[3d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>TIM4_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(i.TIM4_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>

<P><STRONG><a name="[183]"></a>TIM5_CH2_Cap_Init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, tpad.o(i.TIM5_CH2_Cap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIM5_CH2_Cap_Init &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
</UL>

<P><STRONG><a name="[51]"></a>TIM5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>TIM5_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(i.TIM5_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM5_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[55]"></a>TIM6_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>TIM6_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timer.o(i.TIM6_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM6_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[180]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
</UL>

<P><STRONG><a name="[17e]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
</UL>

<P><STRONG><a name="[18f]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>

<P><STRONG><a name="[18d]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>

<P><STRONG><a name="[18e]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>

<P><STRONG><a name="[17f]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>TIM_ICInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
</UL>

<P><STRONG><a name="[182]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
</UL>

<P><STRONG><a name="[17c]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[17d]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
</UL>

<P><STRONG><a name="[1cf]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSG90
</UL>

<P><STRONG><a name="[190]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
</UL>

<P><STRONG><a name="[186]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[188]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[189]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[18a]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[17b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_PWM_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
</UL>

<P><STRONG><a name="[18b]"></a>TPAD_Get_Val</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tpad.o(i.TPAD_Get_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TPAD_Get_Val &rArr; TPAD_Reset &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
</UL>

<P><STRONG><a name="[c8]"></a>TPAD_Init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, tpad.o(i.TPAD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TPAD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_CH2_Cap_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[18c]"></a>TPAD_Reset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tpad.o(i.TPAD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TPAD_Reset &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Get_Val
</UL>

<P><STRONG><a name="[191]"></a>Timer2_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usmart.o(i.Timer2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[44]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART3_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[194]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[192]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[21e]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[196]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
</UL>

<P><STRONG><a name="[193]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[c9]"></a>W25QXX_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = W25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[fe]"></a>W25QXX_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[19b]"></a>W25QXX_ReadID</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, w25qxx.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_ReadID &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[19c]"></a>W25QXX_ReadSR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[19a]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[19d]"></a>W25QXX_Write</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Erase_Sector &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[199]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[19e]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[19f]"></a>W25QXX_Write_Page</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[209]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a0]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a1]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a2]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a3]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a4]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[94]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[84]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1a6]"></a>ai_draw_init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, piclib.o(i.ai_draw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_draw_init &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[e]"></a>ai_load_picfile</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, piclib.o(i.ai_load_picfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ai_load_picfile &rArr; gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>bmp_encode</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, bmp.o(i.bmp_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = bmp_encode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>camera_new_pathname</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(i.camera_new_pathname))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = camera_new_pathname &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[133]"></a>camera_refresh</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, main.o(i.camera_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = camera_refresh &rArr; LCD_Set_Window &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[1e3]"></a>char_upper</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, exfuns.o(i.char_upper))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_typetell
</UL>

<P><STRONG><a name="[1c5]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[163]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[bb]"></a>delay_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b2]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_RESET
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7725_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSG90
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Del_FR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_FR
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAD_Reset
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[d3]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rst
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_Bit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_No_Ack
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WR_Reg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_RD_Reg
</UL>

<P><STRONG><a name="[e1]"></a>delay_xms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, delay.o(i.delay_xms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_xms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180DHT11_task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>

<P><STRONG><a name="[1ca]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1cb]"></a>disk_ioctl</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1cd]"></a>disk_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1e5]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ce]"></a>disk_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[ea]"></a>doSG90</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.doSG90))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = doSG90 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Face
</UL>

<P><STRONG><a name="[c6]"></a>exfuns_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, exfuns.o(i.exfuns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = exfuns_init &rArr; mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[1b1]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[1d2]"></a>f_lseek</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[12f]"></a>f_mkdir</STRONG> (Thumb, 372 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[c7]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[1af]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 96 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_new_pathname
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[1de]"></a>f_opendir</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
</UL>

<P><STRONG><a name="[1df]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[1e0]"></a>f_readdir</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
</UL>

<P><STRONG><a name="[1d0]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1a9]"></a>f_typetell</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, exfuns.o(i.f_typetell))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = f_typetell &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_upper
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[1b0]"></a>f_write</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
</UL>

<P><STRONG><a name="[1ba]"></a>ff_convert</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, mycc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1d6]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_memalloc &rArr; mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[1db]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_memfree &rArr; myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[1bd]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mycc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[12d]"></a>font_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fontupd.o(i.font_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = font_init &rArr; W25QXX_Init &rArr; SPI2_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
</UL>

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1d4]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1e6]"></a>gif_check_head</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gif.o(i.gif_check_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = gif_check_head &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[1ef]"></a>gif_clear2bkcolor</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, gif.o(i.gif_clear2bkcolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gif_clear2bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[1ac]"></a>gif_decode</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, gif.o(i.gif_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = gif_decode &rArr; gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_recovergctbl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_check_head
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[1ea]"></a>gif_dispimage</STRONG> (Thumb, 454 bytes, Stack size 152 bytes, gif.o(i.gif_dispimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[1e8]"></a>gif_drawimage</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, gif.o(i.gif_drawimage))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = gif_drawimage &rArr; gif_dispimage &rArr; gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_savegctbl
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_clear2bkcolor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[1f1]"></a>gif_getdatablock</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gif.o(i.gif_getdatablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readextension
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
</UL>

<P><STRONG><a name="[1e7]"></a>gif_getinfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gif.o(i.gif_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = gif_getinfo &rArr; gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[1ec]"></a>gif_getnextbyte</STRONG> (Thumb, 572 bytes, Stack size 32 bytes, gif.o(i.gif_getnextbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = gif_getnextbyte &rArr; gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextcode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[1f2]"></a>gif_getnextcode</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, gif.o(i.gif_getnextcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = gif_getnextcode &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>

<P><STRONG><a name="[1f3]"></a>gif_getrgb565</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gif.o(i.gif_getrgb565))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_readcolortbl
</UL>

<P><STRONG><a name="[1eb]"></a>gif_initlzw</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gif.o(i.gif_initlzw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gif_initlzw
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_dispimage
</UL>

<P><STRONG><a name="[1ee]"></a>gif_readcolortbl</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gif.o(i.gif_readcolortbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = gif_readcolortbl &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getrgb565
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getinfo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[1f0]"></a>gif_readextension</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gif.o(i.gif_readextension))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = gif_readextension &rArr; gif_getdatablock &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getdatablock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[1e9]"></a>gif_recovergctbl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gif.o(i.gif_recovergctbl))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
</UL>

<P><STRONG><a name="[1ed]"></a>gif_savegctbl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gif.o(i.gif_savegctbl))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_drawimage
</UL>

<P><STRONG><a name="[1fa]"></a>is_element_ok</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, piclib.o(i.is_element_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_element_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_out_func_point
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[1f4]"></a>jd_decomp</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = jd_decomp &rArr; mcu_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[1f7]"></a>jd_prepare</STRONG> (Thumb, 726 bytes, Stack size 40 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[1f8]"></a>jpeg_freeall</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_freeall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jpeg_freeall &rArr; pic_memfree &rArr; myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[60]"></a>jpeg_in_func</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_in_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = jpeg_in_func &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[1f9]"></a>jpeg_mallocall</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tjpgd.o(i.jpeg_mallocall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jpeg_mallocall &rArr; pic_memalloc &rArr; mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[62]"></a>jpeg_out_func_fill</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tjpgd.o(i.jpeg_out_func_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_out_func_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[61]"></a>jpeg_out_func_point</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tjpgd.o(i.jpeg_out_func_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_out_func_point &rArr; is_element_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[1ab]"></a>jpg_decode</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tjpgd.o(i.jpg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[7f]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = main &rArr; BoardInit &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[202]"></a>mem_free</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, malloc.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[5]"></a>mem_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, malloc.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[203]"></a>mem_malloc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, malloc.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[6]"></a>mem_perused</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, malloc.o(i.mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>mf_scan_files</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fattester.o(i.mf_scan_files))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = mf_scan_files &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>minibmp_decode</STRONG> (Thumb, 748 bytes, Stack size 128 bytes, bmp.o(i.minibmp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = minibmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_alpha_blend
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>myfree</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[e3]"></a>mymalloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exfuns_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_files
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[e6]"></a>mymemset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_initlzw
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_getnextbyte
</UL>

<P><STRONG><a name="[116]"></a>mypow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui.o(i.mypow))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180_ShowNum
</UL>

<P><STRONG><a name="[1ad]"></a>pic_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, piclib.o(i.pic_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pic_memalloc &rArr; mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_mallocall
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[1ae]"></a>pic_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, piclib.o(i.pic_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pic_memfree &rArr; myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmp_encode
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_freeall
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gif_decode
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdbmp_decode
</UL>

<P><STRONG><a name="[201]"></a>piclib_alpha_blend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, piclib.o(i.piclib_alpha_blend))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minibmp_decode
</UL>

<P><STRONG><a name="[13e]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
</UL>

<P><STRONG><a name="[20a]"></a>press_FR</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, main.o(i.press_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = press_FR &rArr; doSG90 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSG90
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowErrMessage
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR_task
</UL>

<P><STRONG><a name="[67]"></a>press_FR_task</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.press_FR_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = press_FR_task &rArr; press_FR &rArr; doSG90 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[1b6]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[217]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[216]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[7]"></a>read_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.read_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[204]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[63]"></a>start_task</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1aa]"></a>stdbmp_decode</STRONG> (Thumb, 510 bytes, Stack size 112 bytes, bmp.o(i.stdbmp_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = stdbmp_decode &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memfree
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_memalloc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[bd]"></a>uart3_init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, usart3.o(i.uart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[bc]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[be]"></a>usart2_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, usart2.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usart2_init &rArr; TIM4_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[12]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>usmart_exe</STRONG> (Thumb, 514 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_reset_runtime
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_runtime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[227]"></a>usmart_get_aparm</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[22d]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[220]"></a>usmart_get_fname</STRONG> (Thumb, 358 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[222]"></a>usmart_get_fparam</STRONG> (Thumb, 208 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[223]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[225]"></a>usmart_get_runtime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usmart.o(i.usmart_get_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[11]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(i.usmart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usmart_init &rArr; Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[22c]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[224]"></a>usmart_reset_runtime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usmart.o(i.usmart_reset_runtime))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[14]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[226]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[228]"></a>usmart_str2num</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[221]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[22a]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[229]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[22b]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1442 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[20c]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[210]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[215]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[20d]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[22e]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[20f]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[211]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[213]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[231]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ec]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaceDo_task
</UL>

<P><STRONG><a name="[21d]"></a>vTaskDelete</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1fd]"></a>vTaskStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[218]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[85]"></a>vTaskSwitchContext</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[8]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(i.write_addr))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[230]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[179]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>xTaskGenericNotify</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRMAIN_task
</UL>

<P><STRONG><a name="[e8]"></a>xTaskGenericNotifyWait</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = xTaskGenericNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_FR_task
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FR_Fun_task
</UL>

<P><STRONG><a name="[178]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[233]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[21b]"></a>xTaskResumeAll</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
</UL>

<P><STRONG><a name="[235]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[238]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[23b]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[241]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[23d]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
</UL>

<P><STRONG><a name="[23e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[23f]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[28e]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
</UL>

<P><STRONG><a name="[28f]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[290]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[240]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[244]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[242]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[237]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[23a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[243]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[245]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[21c]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[247]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
</UL>

<P><STRONG><a name="[248]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[24a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[24c]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[250]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[24d]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[24e]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
</UL>

<P><STRONG><a name="[291]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[292]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[24f]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[293]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[251]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[249]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[236]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[252]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[23c]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[10a]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD180MQ2_task
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[137]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_GetPPM
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>

<P><STRONG><a name="[254]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17a]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[103]"></a>JudgeStr</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, as608.o(i.JudgeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JudgeStr &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[145]"></a>MYUSART_SendData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, as608.o(i.MYUSART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLength
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCheck
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[144]"></a>SendAddr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, as608.o(i.SendAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[147]"></a>SendCheck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, as608.o(i.SendCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[143]"></a>SendHead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, as608.o(i.SendHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendHead
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HandShake
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[146]"></a>SendLength</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, as608.o(i.SendLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendLength
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYUSART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_WriteReg
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_SetAddr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ValidTempleteNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_StoreChar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_RegModel
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_ReadSysPara
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_Match
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_HighSpeedSearch
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GetImage
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_GenChar
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS_DeletChar
</UL>

<P><STRONG><a name="[185]"></a>TI1_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[187]"></a>TI2_Config</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[20b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[20e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[212]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[6c]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[214]"></a>prvInitialiseNewTask</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[22f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[64]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[219]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[21a]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b2]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1bb]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1d3]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[1b4]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b9]"></a>create_name</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = create_name &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1bf]"></a>dir_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c2]"></a>dir_find</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1c1]"></a>dir_next</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1c6]"></a>dir_read</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[1c7]"></a>dir_register</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[1c0]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[1d5]"></a>find_volume</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[1d7]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[1c9]"></a>gen_numname</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1e1]"></a>get_fileinfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_fileinfo &rArr; ff_convert &rArr; W25QXX_Read &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[1dc]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1dd]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1c8]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1bc]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1b3]"></a>move_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1d9]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[1d8]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1c3]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1da]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1c4]"></a>sync_window</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1d1]"></a>validate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1b8]"></a>alloc_pool</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[1ff]"></a>bitext</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[200]"></a>block_idct</STRONG> (Thumb, 484 bytes, Stack size 36 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[1b7]"></a>create_huffman_tbl</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[1fe]"></a>huffext</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[1f5]"></a>mcu_load</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[1f6]"></a>mcu_output</STRONG> (Thumb, 782 bytes, Stack size 128 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[246]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[239]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[253]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[24b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
